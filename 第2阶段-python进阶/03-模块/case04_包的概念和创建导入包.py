"""
    当一个项目中有很多个模块时，需要再进行组织。我们将功能类似
    的模块放到一起，形成了“包”。本质上，“包”就是一个必须有__init__.py 的文件夹。典型结构如下：

    文件夹b
        __init__.py
        module_b1.py
        module_b2.py

    导入包的本质其实是“导入了包的 __init__.py ”文件。也就是说，import pack1意味着执行了包pack1下面的 __init__.py文件。
    这样，可以在__init__.py中批量导入我们需要的模块，而不再需要一个个导入。

    __init__.py 的三个核心作用：
         作为包的标识，不能删除。
         导入包实质是执行 __init__.py 文件，可以在 __init__.py 文件中做这个包的初始化、以及需要统一执行代码、批量导入


    import * 这样的语句理论上是希望文件系统找出包中所有的子模块，然后导入它们。这可能会花长时间等。
    Python 解决方案是提供一个 明确的包索引。

    
"""